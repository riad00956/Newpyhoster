import json
import os
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
from dotenv import load_dotenv

load_dotenv()

MANAGER_BOT_TOKEN = os.getenv('MANAGER_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CONTACT = os.getenv('CONTACT')

USERS_FILE = 'users.json'

def load_users():
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=2)

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо!\n\n"
        "ржЖржкржирж╛рж░ ржирж┐ржЬрж╕рзНржм ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ рж╣рзЛрж╕рзНржЯ ржХрж░рждрзЗ:\n"
        "`/addtoken <your_bot_token>`\n"
        "ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред\n\n"
        "тЬЕ рждрж╛рж░ржкрж░ `/mybot` ржжрж┐рзЯрзЗ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред",
        parse_mode='Markdown'
    )

def add_token(update: Update, context: CallbackContext):
    users = load_users()
    user_id = str(update.message.from_user.id)

    if len(context.args) != 1:
        update.message.reply_text("тЪая╕П ржмрзНржпржмрж╣рж╛рж░: `/addtoken <YOUR_BOT_TOKEN>`", parse_mode='Markdown')
        return

    token = context.args[0]

    if len(token) < 20 or ':' not in token:
        update.message.reply_text("тЭМ ржЯрзЛржХрзЗржиржЯрж┐ ржнрзБрж▓, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржЯрзЛржХрзЗржи ржжрж┐ржиред")
        return

    users[user_id] = token
    save_users(users)
    update.message.reply_text("тЬЕ ржЯрзЛржХрзЗржи рж╕рзЗржн рж╣рзЯрзЗржЫрзЗ! ржПржЦржи `/mybot` ржжрж┐рзЯрзЗ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред", parse_mode='Markdown')

def mybot(update: Update, context: CallbackContext):
    users = load_users()
    user_id = str(update.message.from_user.id)

    if user_id not in users:
        update.message.reply_text("тЪая╕П ржЖржкржирж┐ ржПржЦржирзЛ ржХрзЛржирзЛ ржЯрзЛржХрзЗржи ржпрзБржХрзНржд ржХрж░рзЗржиржирж┐ред `/addtoken <TOKEN>` ржжрж┐рзЯрзЗ ржпрзБржХрзНржд ржХрж░рзБржиред", parse_mode='Markdown')
        return

    token = users[user_id]
    try:
        user_bot = Bot(token=token)
        user_bot.send_message(chat_id=update.message.chat_id, text="ЁЯдЦ ржЖржкржирж╛рж░ ржмржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ!")
        update.message.reply_text("тЬЕ ржЯрзЗрж╕рзНржЯ рж╕ржлрж▓!")
    except Exception as e:
        update.message.reply_text(f"тЭМ ржмржЯ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ ржмрзНржпрж░рзНрже: {e}")

def admin_panel(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("ЁЯЪл ржЖржкржирж┐ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЕржирзБржорждрж┐ ржкрж╛ржиржирж┐ред")
        return

    users = load_users()
    total_users = len(users)
    text = (
        "ЁЯЫая╕П *Admin Panel*\n\n"
        f"ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: {total_users}\n"
        f"ЁЯУЮ ржХржирзНржЯрж╛ржХрзНржЯ: {CONTACT}"
    )
    update.message.reply_text(text, parse_mode='Markdown')

def main():
    updater = Updater(MANAGER_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("addtoken", add_token))
    dp.add_handler(CommandHandler("mybot", mybot))
    dp.add_handler(CommandHandler("admin", admin_panel))

    print("ЁЯдЦ Bot is running...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
