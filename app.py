import json
import os
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

MANAGER_BOT_TOKEN = os.getenv('MANAGER_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CONTACT = os.getenv('CONTACT')

USERS_FILE = 'users.json'

# Load saved user tokens
def load_users():
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# Save updated user tokens
def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=2)

# Start command
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ AIR BOT HOSTING BOT ‡¶è!\n\n"
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶π‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá `/addtoken <your_bot_token>` ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§\n"
        "‚úÖ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ `/mybot` ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        parse_mode='Markdown'
    )

# Add bot token command
def add_token(update: Update, context: CallbackContext):
    users = load_users()
    user_id = str(update.message.from_user.id)

    if len(context.args) != 1:
        update.message.reply_text("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®: `/addtoken <YOUR_BOT_TOKEN>`", parse_mode='Markdown')
        return

    token = context.args[0]
    if len(token) < 20 or ':' not in token:
        update.message.reply_text("‚ùå ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßÅ‡¶≤‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡¶®‡•§")
        return

    users[user_id] = token
    save_users(users)
    update.message.reply_text("‚úÖ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® `/mybot` ‡¶¶‡¶ø‡ßü‡ßá ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", parse_mode='Markdown')

# Test user's bot
def mybot(update: Update, context: CallbackContext):
    users = load_users()
    user_id = str(update.message.from_user.id)

    if user_id not in users:
        update.message.reply_text("‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø‡•§ `/addtoken <TOKEN>` ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", parse_mode='Markdown')
        return

    token = users[user_id]
    try:
        user_bot = Bot(token=token)
        user_bot.send_message(chat_id=update.message.chat_id, text="ü§ñ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá!")
        update.message.reply_text("‚úÖ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡•§")
    except Exception as e:
        update.message.reply_text(f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")

# Admin-only command
def admin_panel(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("üö´ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
        return

    users = load_users()
    total_users = len(users)
    text = (
        f"üõ†Ô∏è *Admin Panel*\n\n"
        f"üë• ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {total_users}\n"
        f"üìû Contact: {CONTACT}"
    )
    update.message.reply_text(text, parse_mode='Markdown')

# Main function
def main():
    updater = Updater(MANAGER_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("addtoken", add_token))
    dp.add_handler(CommandHandler("mybot", mybot))
    dp.add_handler(CommandHandler("admin", admin_panel))

    print("‚úÖ AIR BOT HOSTING BOT is running on Render...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
